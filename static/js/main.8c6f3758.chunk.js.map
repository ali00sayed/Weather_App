{"version":3,"sources":["components/weather/Weather.js","components/footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weather","console","log","aqi","className","city_name","country_code","src","icon","alt","temp","description","pres","wind_spd","wind_dir","Footer","key","App","useState","weatherData","setweatherData","city","setCity","getLocationWeather","a","fetch","result","json","res","data","useEffect","placeholder","onChange","evt","target","value","required","onClick","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAGe,SAASA,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QAE9B,OADAC,QAAQC,IAAIF,EAAQG,KAEhB,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,UACI,6BAAKJ,EAAQK,YACb,8BAAML,EAAQM,kBAElB,sBAAKF,UAAU,aAAf,UACI,qBACIA,UAAU,QACVG,IAAG,qDAAgDP,EAAQA,QAAQQ,KAAhE,QACHC,IAAK,SAET,qBAAIL,UAAU,OAAd,UAAsBJ,EAAQU,KAA9B,WACA,mBAAGN,UAAU,YAAb,SAA0BJ,EAAQA,QAAQW,iBAE9C,sBAAKP,UAAU,WAAf,UACI,qBAAIA,UAAU,MAAd,gCAAwCJ,EAAQG,OAChD,qBAAIC,UAAU,OAAd,uBAAgCJ,EAAQY,KAAxC,UACA,qBAAIR,UAAU,WAAd,yBAAsCJ,EAAQa,SAA9C,WACA,qBAAIT,UAAU,WAAd,6BAA0CJ,EAAQc,SAAlD,kB,MCrBD,SAASC,IACpB,OACI,wBAAQX,UAAU,SAAlB,SACI,mBAAGA,UAAU,QAAb,wDCDZ,IAAMY,EAAM,mCAEG,SAASC,IACtB,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAF4B,SAKbC,EALa,8EAK5B,WAAkCF,GAAlC,iBAAAG,EAAA,sEAEuBC,MAAM,+CAAD,OACuBJ,EADvB,gBACmCL,EADnC,sBAF5B,cAEQU,EAFR,gBAMoBA,EAAOC,OAN3B,OAMQC,EANR,OAOER,EAAeQ,EAAIC,MAPrB,2CAL4B,wBA2B5B,OAJAC,qBAAU,WACRP,EAAmB,iBAClB,IAGD,sBAAKnB,UAAU,OAAf,UACE,qBAAKA,UAAU,SAAf,SACE,oBAAIA,UAAU,QAAd,sBAEF,sBAAKA,UAAU,YAAf,UACE,uBACEA,UAAU,cACV2B,YAAY,cACZC,SAnBY,SAACC,GACnBX,EAAQW,EAAIC,OAAOC,QAmBbC,UAAQ,IACV,wBACEhC,UAAU,YACViC,QAAS,WACPd,EAAmBF,IAHvB,uBAUDF,EAAYmB,OAAS,EACpB,mCACE,cAAC,EAAD,CAAStC,QAASmB,EAAY,OAGhC,2CAEF,cAAC,EAAD,OC9DN,IAYeoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c6f3758.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Weather.css\";\n\nexport default function Weather({ weather }) {\n    console.log(weather.aqi);\n    return (\n        <div className=\"container\">\n            <div className=\"city\">\n                <h4>{weather.city_name}</h4>\n                <sup>{weather.country_code}</sup>\n            </div>\n            <div className=\"temprature\">\n                <img\n                    className=\"image\"\n                    src={`https://www.weatherbit.io/static/img/icons/${weather.weather.icon}.png`}\n                    alt={\"name\"}\n                />\n                <h1 className=\"temp\">{weather.temp}&deg;C</h1>\n                <p className=\"temp-desc\">{weather.weather.description}</p>\n            </div>\n            <div className=\"pres-aqi\">\n                <h6 className=\"aqi\">Air Quality Index: {weather.aqi}</h6>\n                <h6 className=\"pres\">Pressure: {weather.pres} mb </h6>\n                <h6 className=\"wind-spd\">Wind speed: {weather.wind_spd} m/s </h6>\n                <h6 className=\"wind-dir\">Wind Direction: {weather.wind_dir}&deg;C </h6>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./Footer.css\";\n\nexport default function Footer() {\n    return (\n        <footer className=\"footer\">\n            <p className=\"title\">Copyright Â© 2021 All Rights Reserved.</p>\n        </footer>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Weather from \"./components/weather/Weather\";\nimport Footer from \"./components/footer/Footer\";\nconst key = \"d0b49537880c4a4193357cc5e92210a0\";\n\nexport default function App() {\n  const [weatherData, setweatherData] = useState([]);\n  const [city, setCity] = useState(\"\");\n\n  //fetching data from weathbit.io api\n  async function getLocationWeather(city) {\n\n    const result = await fetch(\n      `https://api.weatherbit.io/v2.0/current?city=${city}&key=${key}&include=minutely`\n    );\n\n    const res = await result.json();\n    setweatherData(res.data);\n\n  }\n\n  //getting value from input\n  const updateInput = (evt) => {\n    setCity(evt.target.value);\n  };\n\n  //changing bacground based on time\n\n  useEffect(() => {\n    getLocationWeather(\"Chittorgarh\");\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <div className=\"navbar\">\n        <h1 className=\"title\">Mausam</h1>\n      </div>\n      <div className=\"searchBar\">\n        <input\n          className=\"searchBlock\"\n          placeholder=\"Search City\"\n          onChange={updateInput}\n          required />\n        <button\n          className=\"searchBtn\"\n          onClick={() => {\n            getLocationWeather(city);\n          }}\n        >\n          Search\n        </button>\n      </div>\n\n      {weatherData.length > 0 ? (\n        <>\n          <Weather weather={weatherData[0]} />\n        </>\n      ) : (\n        <p>Loading...</p>\n      )}\n      <Footer />\n    </div>\n  );\n}\n\n//\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}